# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
import requests

class EinsteinTrade:
    def __init__(self):
        self.portfolio = {}
        self.balance = 0
        self.api_key = "4C5SQM5B83RFQAHB"  # Replace with your Alpha Vantage API key

    def buy(self, symbol, quantity, price):
        total_cost = quantity * price
        if total_cost <= self.balance:
            if symbol not in self.portfolio:
                self.portfolio[symbol] = 0
            self.portfolio[symbol] += quantity
            self.balance -= total_cost
            print(f"Bought {quantity} shares of {symbol} at ${price} each.")
        else:
            print("Insufficient balance to complete the purchase.")

    def sell(self, symbol, quantity, price):
        if symbol not in self.portfolio or self.portfolio[symbol] < quantity:
            print("Unable to complete the sale.")
        else:
            self.portfolio[symbol] -= quantity
            total_earning = quantity * price
            self.balance += total_earning
            print(f"Sold {quantity} shares of {symbol} at ${price} each.")

    def display_portfolio(self):
        print("Portfolio:")
        for symbol, quantity in self.portfolio.items():
            print(f"{symbol}: {quantity} shares")

        print(f"Balance: ${self.balance}")

    def get_stock_price(self, symbol):
        try:
            response = requests.get(f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={self.api_key}")
            if response.status_code == 200:
                data = response.json()
                if 'Global Quote' in data:
                    price = float(data['Global Quote']['05. price'])
                    return price
                else:
                    print("Stock price data not found.")
            else:
                print("Error retrieving stock price.")
        except requests.exceptions.RequestException:
            print("Error retrieving stock price. Please check your internet connection.")

    def place_order(self, symbol, quantity, order_type):
        price = self.get_stock_price(symbol)
        if price:
            if order_type == "buy":
                self.buy(symbol, quantity, price)
            elif order_type == "sell":
                self.sell(symbol, quantity, price)
            else:
                print("Invalid order type.")
        else:
            print("Unable to place order.")

# Example usage
trade_app = EinsteinTrade()

trade_app.place_order("AAPL", 10, "buy")
trade_app.place_order("GOOG", 5, "buy")
trade_app.display_portfolio()

trade_app.place_order("AAPL", 3, "sell")
trade_app.display_portfolio()
