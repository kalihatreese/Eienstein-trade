import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout


def get_data(start_date, end_date):
    """
    Fetch data from the Quandl API with a maximum range of 5 years.
    """
    end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")
    max_start_date = (end_date_obj - timedelta(days=5 * 365)).strftime("%Y-%m-%d")
    start_date = max(start_date, max_start_date)
    try:
        df = pd.read_csv(f"https://www.quandl.com/api/v1/datasets/NSE/RELIANCE/data.csv?trim_start={start_date}&trim_end={end_date}&sort_order=desc")
        df.set_index("Date", inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()


def calculate_moving_averages(df, window_size):
    """
    Calculate moving averages for the given data.
    """
    if "Close" in df.columns:
        df[f"MA_{window_size}"] = df["Close"].rolling(window_size).mean()
    return df


def calculate_bollinger_bands(df, window_size, num_stds):
    """
    Calculate Bollinger Bands for the given data.
    """
    if "Close" in df.columns:
        rolling_mean = df["Close"].rolling(window_size).mean()
        rolling_std = df["Close"].rolling(window_size).std()
        df[f"BB_Upper_{window_size}"] = rolling_mean + num_stds * rolling_std
        df[f"BB_Lower_{window_size}"] = rolling_mean - num_stds * rolling_std
    return df


def get_signals(df, window_size, num_stds):
    """
    Generate trading signals based on Bollinger Bands.
    """
    if f"BB_Upper_{window_size}" in df.columns and f"BB_Lower_{window_size}" in df.columns:
        df["Signal"] = np.where(
            df["Close"] > df[f"BB_Upper_{window_size}"], 1,
            np.where(df["Close"] < df[f"BB_Lower_{window_size}"], -1, 0)
        )
    return df


def backtest(df):
    """
    Backtest the trading strategy.
    """
    if "Signal" in df.columns and "Close" in df.columns:
        positions = df["Signal"].tolist()
        portfolio_value = 10000
        for i, signal in enumerate(positions):
            if signal == 1 and i < len(df["Close"]):
                portfolio_value += df["Close"].iloc[i]
            elif signal == -1 and i < len(df["Close"]):
                portfolio_value -= df["Close"].iloc[i]
        return portfolio_value
    return 0


class MyApp(App):
    def build(self):
        layout = GridLayout(cols=2)
        start_date = "2010-01-01"
        end_date = "2023-06-07"
        df = get_data(start_date, end_date)
        if not df.empty:
            df = calculate_moving_averages(df, 20)
            df = calculate_bollinger_bands(df, 20, 2)
            df = get_signals(df, 20, 2)
            portfolio_value = backtest(df)
        else:
            portfolio_value = "Error: No data fetched."
        layout.add_widget(Label(text="Portfolio Value:"))
        layout.add_widget(Label(text=str(portfolio_value)))
        return layout


if __name__ == "__main__":
    MyApp().run()